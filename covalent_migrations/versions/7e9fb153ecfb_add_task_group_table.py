# Copyright 2021 Agnostiq Inc.
#
# This file is part of Covalent.
#
# Licensed under the Apache License 2.0 (the "License"). A copy of the
# License may be obtained with this software package or at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Use of this file is prohibited except in compliance with the License.
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Add task_group table

Revision ID: 7e9fb153ecfb
Revises: 7b40a55c0752
Create Date: 2025-03-25 16:36:49.408467

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
# pragma: allowlist nextline secret
revision = "7e9fb153ecfb"
# pragma: allowlist nextline secret
down_revision = "7b40a55c0752"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "taskgroupstate",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dispatch_id", sa.Text(), nullable=False),
        sa.Column("task_group_id", sa.Integer(), nullable=False),
        sa.Column("num_pending_parents", sa.Integer(), nullable=False),
        sa.Column("sorted_tasks", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "workflowstate",
        sa.Column("dispatch_id", sa.Text(), nullable=False),
        sa.Column("num_unresolved_tasks", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("dispatch_id"),
    )

    with op.batch_alter_table("taskgroupstate", schema=None) as batch_op:
        batch_op.create_index("task_grp_idx", ["dispatch_id", "task_group_id"], unique=False)

    with op.batch_alter_table("lattices", schema=None) as batch_op:
        batch_op.create_unique_constraint("u_electron_id", ["electron_id"])

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("lattices", schema=None) as batch_op:
        batch_op.drop_constraint("u_electron_id", type_="unique")

    with op.batch_alter_table("taskgroupstate", schema=None) as batch_op:
        batch_op.drop_index("task_grp_idx")

    op.drop_table("workflowstate")
    op.drop_table("taskgroupstate")
    # ### end Alembic commands ###
