# Copyright 2021 Agnostiq Inc.
#
# This file is part of Covalent.
#
# Licensed under the GNU Affero General Public License 3.0 (the "License").
# A copy of the License may be obtained with this software package or at
#
#      https://www.gnu.org/licenses/agpl-3.0.en.html
#
# Use of this file is prohibited except in compliance with the License. Any
# modifications or derivative works of this file must retain this copyright
# notice, and modified files must contain a notice indicating that they have
# been altered from the originals.
#
# Covalent is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the License for more details.
#
# Relief from the License may be granted by purchasing a commercial license.

name: Build Image and Run Container

on:
  pull_request

env:
  port_map: 48008:8080

jobs:
  build_run_container:
    runs-on: ubuntu-latest
    steps:
      - name: Check out head
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Image
        run: |
          docker build -t ${{ secrets.AWS_ECR_DEV_REPO }} .
      - name: Run and test container
        run: |
          pip install cova
          pip freeze | grep cova
          docker run -d -p $port_map ${{ secrets.AWS_ECR_DEV_REPO }}
          echo 'Running example dispatch to check container health'
          echo ${port_map}
          cat << EOF > test_dispatch.py
          import covalent as ct
          @ct.electron
          def join_words(a, b):
            return ", ".join([a, b])
          @ct.electron
          def excitement(a):
            return f"{a}!"
          @ct.lattice
          def simple_workflow(a, b):
            phrase = join_words(a, b)
            return excitement(phrase)
          dispatch_id = ct.dispatch(simple_workflow)("Hello", "World")
          result_string = ct.get_result(dispatch_id).result
          print(f'Dispatch id {result_string} completed successfully')
          EOF
          python test_dispatch.py
      - name: Discarding container
        run: |
          echo 'Discarding container after successful test run'
          docker stop $(docker container ls -a | awk 'NR>1 {print $1}')
          docker rm $(docker container ls -a | awk 'NR>1 {print $1}')

