# Copyright 2021 Agnostiq Inc.
#
# This file is part of Covalent.
# 
# Licensed under the GNU Affero General Public License 3.0 (the "License"). 
# A copy of the License may be obtained with this software package or at
#
#      https://www.gnu.org/licenses/agpl-3.0.en.html
#
# Use of this file is prohibited except in compliance with the License. Any 
# modifications or derivative works of this file must retain this copyright 
# notice, and modified files must contain a notice indicating that they have 
# been altered from the originals.
#
# Covalent is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the License for more details.
#
# Relief from the License may be granted by purchasing a commercial license.

name: publish

on:
  push:
    branches:
      - master
      - i-8-test

jobs:
  publish_master:
    runs-on: ubuntu-latest
    steps:
      - name: Check out head
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Generate tag
        run: |
          aws --version
          docker info
          docker --version
          TAG="$(cat ./VERSION)"
          if aws ecr-public describe-images \
            --repository-name covalent \
            --image-ids imageTag=$TAG &> /dev/null ; then
            SHORT_SHA="${GITHUB_SHA::8}"
            TAG=$TAG-$SHORT_SHA
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          run: |
            pip install -r requirements.txt
            echo 'The name of the ecr master repo is ${{ secrets.AWS_ECR_REPO }}'
            docker build -t ${{ secrets.AWS_ECR_REPO }}
            docker run -d -p 48008:8080 ${{ secrets.AWS_ECR_REPO }}
            echo 'Creating a test dispatch...'
            cat << EOF > test_dispatch.py
            import covalent as ct
            import time
            from requests import request
            import covalent_dispatcher._cli.service as service
            @ct.electron
            def join_words(a, b):
              return ", ".join([a, b])
            @ct.electron
            def excitement(a):
              return f"{a}!"
            @ct.lattice
            def simple_workflow(a, b):
              phrase = join_words(a, b)
              return excitement(phrase)
            if service._is_server_running():
              print('Dispatcher service has started')
            else:
              print('Waiting for dispatcher service to start...')
              time.sleep(30)
            dispatch_id = ct.dispatch(simple_workflow, dispatcher_addr='localhost:48008')("Hello", "Covalent")
            print('Dispatch id is:', dispatch_id)
            results_url = "http://localhost:48008/api/results"
            results = request("GET", results_url, headers={}, data={}).json()
            dispatch_result = results[0]['result'] if results else None
            dispatch_status = results[0]['status'] if results else None
            dispatch_id = ct.dispatch(simple_workflow, dispatcher_addr='localhost:48008')("Hello", "Covalent")
            print(f'Dispatch {dispatch_id} was executed successfully with status: {dispatch_status}')
            print(f'The result of the dispatch is: {dispatch_result}')
            EOF
            cat << EOF > run_dispatch.py
            import subprocess
            import sys
            for idx in range(2):
              sys.stdout = open('result%s.txt' % idx, 'w')
              subprocess.check_call(['python3', 'test_dispatch.py'],stdout=sys.stdout, stderr=subprocess.STDOUT)
            EOF
            echo 'Running test dispatch...'
            python3 run_dispatch.py
            echo 'Printing results of dispatch...'
            cat result1.txt
          push: true
          tags: |
            ${{ secrets.AWS_ECR_REPO }}:latest
            ${{ secrets.AWS_ECR_REPO }}:${{ env.TAG }}
