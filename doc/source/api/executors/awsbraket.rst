.. _awsbraket_executor:

ðŸ”Œ AWS Braket Executor
"""""""""""""""""""""""""""

.. image:: AWS_Braket.jpg


Covalent is a Pythonic workflow tool used to execute tasks on advanced computing hardware.

This plugin allows executing quantum circuits and quantum-classical hybrid jobs in Amazon Braket when you use Covalent.


===========================================
1. Installation
===========================================

To use this plugin with Covalent, simply install it using :code:`pip`:

.. code:: bash

   pip install covalent-awsbraket-plugin

.. note::

   Users will also need to have `Docker <https://docs.docker.com/get-docker/>`_ installed on their local machine to use this plugin.



===========================================
2. Usage Example
===========================================

The following toy example executes a simple quantum circuit on one
qubit that prepares a uniform superposition of the standard basis
states and then measures the state. We use the `Pennylane
<https://pennylane.ai/>`_ framework.

.. code-block:: python

    import covalent as ct
    from covalent_braket_plugin.braket import BraketExecutor
    import os

    # AWS resources to pass to the executor
    credentials_file = "~/.aws/credentials"
    profile = "default"
    s3_bucket_name = "braket_s3_bucket"
    ecr_repo_name = "braket_ecr_repo"
    iam_role_name = "covalent-braket-iam-role"

    # Instantiate the executor
    ex = BraketExecutor(
	credentials=credentials_file,
	profile=profile,
	s3_bucket_name=s3_bucket_name,
	ecr_repo_name=ecr_repo_name,
	braket_job_execution_role_name=iam_role_name,
	quantum_device="arn:aws:braket:::device/quantum-simulator/amazon/sv1",
	classical_device="ml.m5.large",
	storage=30,
	time_limit=300,
    )


    # Execute the following circuit:
    # |0> - H - Measure
    @ct.electron(executor=ex)
    def simple_quantum_task(num_qubits: int):
	import pennylane as qml

	# These are passed to the Hybrid Jobs container at runtime
	device_arn = os.environ["AMZN_BRAKET_DEVICE_ARN"]
	s3_bucket = os.environ["AMZN_BRAKET_OUT_S3_BUCKET"]
	s3_task_dir = os.environ["AMZN_BRAKET_TASK_RESULTS_S3_URI"].split(s3_bucket)[1]

	device = qml.device(
	    "braket.aws.qubit",
	    device_arn=device_arn,
	    s3_destination_folder=(s3_bucket, s3_task_dir),
	    wires=num_qubits,
	)

	@qml.qnode(device=device)
	def simple_circuit():
	    qml.Hadamard(wires=[0])
	    return qml.expval(qml.PauliZ(wires=[0]))

	res = simple_circuit().numpy()
	return res


    @ct.lattice
    def simple_quantum_workflow(num_qubits: int):
	return simple_quantum_task(num_qubits=num_qubits)


    dispatch_id = ct.dispatch(simple_quantum_workflow)(1)
    result_object = ct.get_result(dispatch_id, wait=True)

    # We expect 0 as the result
    print("Result:", result_object.result)

During the execution of the workflow one can navigate to the UI to see
the status of the workflow, once completed however the above script
should also output a value with the output of the quantum measurement.

.. code-block:: shell

    >>> Result: 0

===========================================
3. Overview of Configuration
===========================================

.. list-table::
   :widths: 2 1 2 3
   :header-rows: 1

   * - Config Key
     - Is Required
     - Default
     - Description
   * - credentials_file
     - Yes
     - "~/.aws/credentials"
     - The path to the AWS credentials file
   * - braket_job_execution_role_name
     - Yes
     - "CovalentBraketJobsExecutionRole"
     - The name of the IAM role that Braket will assume during task execution.
   * - profile
     - No
     - "default"
     - Named AWS profile used for authentication
   * - s3_bucket_name
     - No
     - amazon-braket-covalent-job-resources
     - The S3 bucket where Covalent will store input and output files for the task.
   * - ecr_repo_name
     - No
     - "covalent-braket-job-images"
     - The ECR repo where the job container will be uploaded
   * - quantum_device
     - No
     - "arn:aws:braket:::device/quantum-simulator/amazon/sv1"
     - The ARN of the quantum device to use
   * - Classical device
     - No
     - "ml.m5.large"
     - Instance type for the classical device to use
   * - storage
     - No
     - 30
     - Storage size in GB for the classical device
   * - time_limit
     - No
     - 300
     - Max running time in seconds for the Braket job
   * - poll_freq
     - No
     - 30
     - How often (in seconds) to poll Braket for the job status
   * - cache_dir
     - No
     - "/tmp/covalent"
     - Location for storing temporary files generated by the Covalent server

This plugin can be configured in one of two ways:

#. Configuration options can be passed in as constructor keys to the executor class :code:`ct.executor.BraketExecutor`

#. By modifying the `covalent configuration file <https://covalent.readthedocs.io/en/latest/how_to/config/customization.html>`_ under the section :code:`[executors.braket]`



The following shows an example of how a user might modify their `covalent configuration file <https://covalent.readthedocs.io/en/latest/how_to/config/customization.html>`_  to support this plugin:

.. code:: shell

    [executors.braket]
    quantum_device = "arn:aws:braket:::device/qpu/ionq/ionQdevice"
    time_limit = 3600


.. autoclass:: covalent.executor.BraketExecutor
    :members:
    :inherited-members:


===========================================
4. Required Cloud Resources
===========================================

The Braket executor requires some resources to be provisioned on
AWS. Precisely, users will need an S3 bucket, an ECR repo, and an IAM
role with the appropriate permissions to be passed to Braket.

.. list-table::
   :widths: 2 1 2 3
   :header-rows: 1

   * - Resource
     - Is Required
     - Config Key
     - Description
   * - IAM role
     - Yes
     - :code:`braket_job_execution_role_name`
     - An IAM role granting permissions to Braket, S3, ECR, and a few other resources. The "AmazonBraketFullAccess" managed policy would suffice.
   * - ECR repository
     - Yes
     - :code:`ecr_repo_name`
     - An ECR repository for storing container images to be run by Braket.
   * - S3 bucket
     - Yes
     - :code:`s3_bucket`
     - An S3 bucket for storing task-specific data, such as Braket outputs or function inputs.


#. For more information on the permissions required of the IAM role,
   please see the AWS documentation on `"managing access to Amazon
   Braket"
   <https://docs.aws.amazon.com/braket/latest/developerguide/braket-manage-access.html>`_.
#. Braket jobs are packaged and shipped in containers together with
   some supporting packages; for more context, see the `"Bring your
   own container"
   <https://docs.aws.amazon.com/braket/latest/developerguide/braket-jobs-byoc.html>`_
   documentation on AWS. This is why an ECR repo is needed.  For more
   information on configuring an ECR repository, consult the `AWS
   documentation
   <https://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html>`_.
#. The `AWS documentation on S3
   <https://docs.aws.amazon.com/AmazonS3/latest/userguide/GetStartedWithS3.html>`_
   details how to configure an S3 bucket.
