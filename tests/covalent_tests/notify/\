# Copyright 2021 Agnostiq Inc.
#
# This file is part of Covalent.
#
# Licensed under the GNU Affero General Public License 3.0 (the "License").
# A copy of the License may be obtained with this software package or at
#
#      https://www.gnu.org/licenses/agpl-3.0.en.html
#
# Use of this file is prohibited except in compliance with the License. Any
# modifications or derivative works of this file must retain this copyright
# notice, and modified files must contain a notice indicating that they have
# been altered from the originals.
#
# Covalent is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the License for more details.
#
# Relief from the License may be granted by purchasing a commercial license.

"""Tests for notification init file."""

import pytest

from covalent.notify import _NotificationManager

def test_notify_manager_init(mocker):
    """Test the init method of the notification manager class object."""

    load_plugins_mock = mocker.patch("covalent.notify._NotificationManager._load_plugins", return_value=None)

    _NotificationManager()

    load_plugins_mock.assert_called_with_once_with()

def test_load_webhook_plugin(mocker):
    """Test the webhook portion in the load_plugins method of the notification manager object."""

    init_mock = mocker.patch("covalent.notify._NotifyManager.__init__", return_value=None)

    nm = _NotificationManager()
    init_mock.assert_called_once_with()

    resolve_mock = mocker.patch("pathlib.Path.parent.resolve", return_value="covalent/notify")
    spec_mock = mocker.patch("importlib.util.spec_from_file_location", return_value="spec")

    load_from_module_mock = mocker.patch("covalent.notify._NotifyManager._load_plugin_from_module", return_value=None)

    nm._load_plugins()

    resolve_mock.assert_called_once_with()
    load_from_module_mock.assert_called_once_with()
